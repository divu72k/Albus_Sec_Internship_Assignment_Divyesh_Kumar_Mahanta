import re
import requests
import socket
import argparse

class RCEDetector:
    def __init__(self, url):
        self.url = url
        self.rce_patterns = [
            r'\bexec\b',
            r'\bsystem\b',
            r'\beval\b',
            r'\b__import__\b'
            r'\bexec\s*\(',
            r'\beval\s*\(',
            r'\bsystem\s*\(',
            r'\bshell_exec\s*\(',
            r'\bpassthru\s*\(',
            r'\bproc_open\s*\(',
            r'\bpopen\s*\(',
            r'\bsymlink\s*\(',
        ]
        self.false_positives = [
            r'//.*',
            r'\".*?\"',
            r'\'.*?\'',
        ]

    def detect_rce(self):
        try:
            response = requests.get(self.url, timeout=5)
            response.raise_for_status()
            content = response.text
            for pattern in self.rce_patterns:
                if self._search_pattern(content, pattern):
                    return True
            return False
        except requests.RequestException as e:
            print(f"Error: {e}")
            return False

    def detect_rce_socket(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            host = self.get_host(self.url)
            port = 80
            sock.connect((host, port))
            request = f'GET / HTTP/1.1\r\nHost: {self.url}\r\n\r\n'
            sock.send(request.encode())
            response = sock.recv(1024)
            for pattern in self.rce_patterns:
                if self._search_pattern(response.decode(), pattern):
                    return True
            return False
        except socket.error as e:
            print(f"Error: {e}")
            return False

    def detect_rce_file(self):
        try:
            response = requests.get(self.url + '/robots.txt', timeout=5)
            response.raise_for_status()
            content = response.text
            for pattern in self.rce_patterns:
                if self._search_pattern(content, pattern):
                    return True
            return False
        except requests.RequestException as e:
            print(f"Error: {e}")
            return False

    def get_host(self, url):
        return url.split('//')[-1].split('/')[0]
    
    def check_vulnerability(self,url):
        headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15',
        'Accept': '*/*'
    }

        response = requests.get(url, headers=headers)

        if 'WordPress 6.4 was detected' in response.text:
            print(f"Vulnerability CVE-2024-31210 detected at {url}")
        else:
            print(f"No vulnerability detected at {url}")

    def _search_pattern(self, content, pattern):
        for fp in self.false_positives:
            content = re.sub(fp, '', content)
        if re.search(pattern, content, re.IGNORECASE):
            return True
        return False

def main():
    parser = argparse.ArgumentParser(description="general RCE finder")
    parser.add_argument("-u", "--url", help="give a URL as an argument")
    args = parser.parse_args()
    if args.url:
        detector = RCEDetector(args.url)
        if detector.detect_rce() or detector.detect_rce_socket() or detector.detect_rce_file() or detector.check_vulnerability():
            print("RCE detected!")
        else:
            print("No RCE detected.")

if __name__ == '__main__':
    main()