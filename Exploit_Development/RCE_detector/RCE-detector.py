import re
import requests
import socket
import argparse
from bs4 import BeautifulSoup
import threading
import time



print("██████╗░░█████╗░███████╗░░░░░░██████╗░███████╗████████╗███████╗░█████╗░████████╗░█████╗░██████╗░")
print("██╔══██╗██╔══██╗██╔════╝░░░░░░██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗")
print("██████╔╝██║░░╚═╝█████╗░░█████╗██║░░██║█████╗░░░░░██║░░░█████╗░░██║░░╚═╝░░░██║░░░██║░░██║██████╔╝")
print("██╔══██╗██║░░██╗██╔══╝░░╚════╝██║░░██║██╔══╝░░░░░██║░░░██╔══╝░░██║░░██╗░░░██║░░░██║░░██║██╔══██╗")
print("██║░░██║╚█████╔╝███████╗░░░░░░██████╔╝███████╗░░░██║░░░███████╗╚█████╔╝░░░██║░░░╚█████╔╝██║░░██║")
print("╚═╝░░╚═╝░╚════╝░╚══════╝░░░░░░╚═════╝░╚══════╝░░░╚═╝░░░╚══════╝░╚════╝░░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝")


class RCEDetector:
    def __init__(self, url):
        self.url = url
        self.rce_patterns = [
            r'\bexec\b',
            r'\bsystem\b',
            r'\beval\b',
            r'\b__import__\b'
            r'\bexec\s*\(',
            r'\beval\s*\(',
            r'\bsystem\s*\(',
            r'\bshell_exec\s*\(',
            r'\bpassthru\s*\(',
            r'\bproc_open\s*\(',
            r'\bpopen\s*\(',
            r'\bsymlink\s*\(',
        ]
        self.false_positives = [
            r'//.*',
            r'\".*?\"',
            r'\'.*?\'',
        ]
    
    def detect_rce(self):
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36'}
            time.sleep(5)
            response = requests.get(self.url, headers=headers, timeout=2)
            response.raise_for_status()
            content = response.text
            for pattern in self.rce_patterns:
                if self._search_pattern(content, pattern):
                    return True
            return False
        except requests.RequestException as e:
            if isinstance(e, requests.exceptions.MissingSchema):
                print("[-] Invalid URL:", self.url)
            return False

    def detect_rce_socket(self):
        try:
            time.sleep(5)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            host = self.get_host(self.url)
            ports = [80,443,21,22,25,53,110,143,3306,3389]
            for port in ports:
                sock.connect((host, port))
                request = f'GET / HTTP/1.1\r\nHost: {self.url}\r\n\r\n'
                sock.send(request.encode())
                response = sock.recv(1024)
                for pattern in self.rce_patterns:
                    if self._search_pattern(response.decode(), pattern):
                        return True
                return False
        except socket.error as e:
            print(f"[-] Error: {e}")
            return False

    def detect_rce_file(self):
        try:
            time.sleep(5)
            response = requests.get(self.url + '/robots.txt', timeout=2)
            response.raise_for_status()
            content = response.text
            for pattern in self.rce_patterns:
                if self._search_pattern(content, pattern):
                    return True
            return False
        except requests.RequestException as e:
            print(f"[-] Error: {e}")
            return False

    def get_host(self, url):
        return url.split('//')[-1].split('/')[0]
    
    def check_cve_2024_31210(self,url):
        headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15',
        'Accept': '*/*'
    }

        response = requests.get(url, headers=headers)

        if 'WordPress 6.4 was detected' in response.text:
            print(f"[+] Vulnerability CVE-2024-31210 detected at {url}")
        else:
            print(f"[-] CVE-2024-31210 vulnerability not detected at {url}")

    def check_cve_2024_31380(self,url):
        headers = {'User-Agent': 'Mozilla/5.0 (compatible; Python)'}
    
        try:
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"[-] Failed to retrieve {url}. Status code: {response.status_code}")
                return
        
            soup = BeautifulSoup(response.text, 'html.parser')
        
            oxygen_plugin_detected = False
            oxygen_version = None
        
            for script in soup.find_all('script'):
                src = script.get('src', '')
                if 'oxygen' in src:
                    oxygen_plugin_detected = True
                    match = re.search(r'oxygen-(\d+(?:\.\d+)+)\.min\.js', src)
                    if match:
                        oxygen_version = match.group(1)
                    break
            if oxygen_plugin_detected:
                message = f"[+] Oxygen Builder plugin{' version {oxygen_version}' if oxygen_version else ''} detected at {url} , potential CVE-2024-31380"
                print(message)
            else:
                print(f"[-] No Oxygen Builder plugin detected at {url}")
        except Exception as e:
            print(f"[-] An error occurred: {e}")

    def check_cve_2024_31390(self,url):
        headers = {'User-Agent': 'Mozilla/5.0 (compatible; Python)'}
        time.sleep(5)
        try:
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"[-] Failed to retrieve {url}. Status code: {response.status_code}")
                return
        
            soup = BeautifulSoup(response.text, 'html.parser')
        
            bd_plugin_detected = False
            bd_version = None
        
            for script in soup.find_all('script'):
                src = script.get('src', '')
                if 'breakdance' in src:
                    bd_plugin_detected = True
                    match = re.search(r'oxygen-(\d+(?:\.\d+)+)\.min\.js', src)
                    if match:
                        bd_version = match.group(1)
                    break
            if bd_plugin_detected:
                message = f"[+] Sofly Breakdance plugin{' version {bd_version}' if bd_version else ''} detected at {url},potential CVE-2024-31390"
                print(message)
            else:
                print(f"[-] No Sofly Breakdance plugin detected at {url}")
        except Exception as e:
            print(f"[-] An error occurred: {e}")
    
    def test_authentication_bypass(self,url):
        print("Testing Authentication Bypass...")
        time.sleep(5)
        normal_response = requests.get(url)
        if normal_response.status_code==200:
            print(f"[+] Normal Response Status Code: {normal_response.status_code} at {url}")
        else:
            print(f"[-] Normal Response Status Code: {normal_response.status_code} at {url}")    
        headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "X-Forwarded-For": "127.0.0.1",
        "X-Original-URL": "/admin"
        }
        bypass_headers_response = requests.get(url, headers=headers)
        if bypass_headers_response.status_code==200:
            print(f"[+] Bypass Headers Response Status Code: {bypass_headers_response.status_code} at {url}")
        else:
            print(f"[-] Bypass Headers Response Status Code: {bypass_headers_response.status_code} at {url}")
    
        params = {
        "user": "admin",
        "pass": "password"
        }
        bypass_params_response = requests.get(url, params=params)
        if bypass_params_response.status_code==200:
            print(f"[+] Bypass Params Response Status Code: {bypass_params_response.status_code} at {url}")
        else:
            print(f"[-] Bypass Params Response Status Code: {bypass_params_response.status_code} at {url}")
        cookies = {
        "session_id": "admin_session"
        }
        bypass_cookies_response = requests.get(url, cookies=cookies)
        if bypass_cookies_response.status_code==200:
            print(f"[+] Bypass Cookies Response Status Code: {bypass_cookies_response.status_code} at {url}")
        else:
            print(f"[-] Bypass Cookies Response Status Code: {bypass_cookies_response.status_code} at {url}")

    def _search_pattern(self, content, pattern):
        for fp in self.false_positives:
            content = re.sub(fp, '', content)
        if re.search(pattern, content, re.IGNORECASE):
            return True
        return False

def main():
    parser = argparse.ArgumentParser(description="A General RCE Finder which searches for authentification bypass, CVE-2024-31210, CVE-2024-31380 and CVE-2024-31390")
    parser.add_argument("-u", "--url", help="give a URL as an argument")
    parser.add_argument("-f","--file", help="give a file containing the URLs")
    args = parser.parse_args()
    
    if args.url:
        detector = RCEDetector(args.url)
        threads=[
                threading.Thread(target=detector.detect_rce),
                threading.Thread(target=detector.check_cve_2024_31210,args=(args.url,)),
                threading.Thread(target=detector.check_cve_2024_31380,args=(args.url,)),
                threading.Thread(target=detector.check_cve_2024_31390,args=(args.url,)),
                threading.Thread(target=detector.detect_rce_socket),
                threading.Thread(target=detector.test_authentication_bypass,args=(args.url,)),
                threading.Thread(target=detector.detect_rce_file)
                ]
        for i in threads:
            i.start()
        for i in threads:
            i.join()
        if any(i.is_alive() for i in threads):
            print("[+] RCE Detected!!!!!")
        else:
            print("[-] RCE not found")


    if args.file:
        with open(args.file,"r") as f1:
            u=[line.strip() for line in f1.readlines()]
            for i in u:
                detect=RCEDetector(i)
                threads=[
                threading.Thread(target=detect.detect_rce),
                threading.Thread(target=detect.check_cve_2024_31210,args=(i,)),
                threading.Thread(target=detect.check_cve_2024_31380,args=(i,)),
                threading.Thread(target=detect.check_cve_2024_31390,args=(i,)),
                threading.Thread(target=detect.test_authentication_bypass,args=(i,)),
                threading.Thread(target=detect.detect_rce_file),
                threading.Thread(target=detect.detect_rce_socket)
                ]
                for m in threads:
                    m.start()
                for n in threads:
                    n.join()
                if any(j.is_alive() for j in threads):
                    print(f"[+] RCE Detected!!!!! at {i}")
                else:
                    print(f"[-] RCE not found at {i}")



if __name__ == '__main__':
    main()
